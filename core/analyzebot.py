import google.generativeai as genai

class GenAiException(Exception):
    """GenAI Exception Base Class"""

class AnalyzeBot:
    """Chat can only have one candidate count"""
    ChatBot_Name = 'My Gemini AI'
    
    def __init__(self, api_key):
        self.genai = genai
        self.api_key = api_key
        self.genai.configure(api_key=self.api_key)
        self.model = self.genai.GenerativeModel('gemini-pro')
        self.conversation = None
        self._conversation_history = []
        self.preload_conversation()
        
    def send_prompt(self, prompt, temperature=0.8):
        if temperature < 0 or temperature > 1:
            raise GenAiException('Temprature must be between 0 and 1')
        
        if not prompt:
            raise GenAiException('Prompt cannot be empty')
        
        try:
            response = self.conversation.send_message(
                content=prompt, 
                generation_config= self._generation_config(temperature),
            )
            response.resolve()
            return f'{response.text}\n'
        except Exception as e:
            raise GenAiException(e)
        
    @property
    def history(self):
        converstion_history = [
            {'role':message.role, 'text': message.parts[0].text} for message in self.conversation.history
        ]
        return converstion_history
    
    def clear_conversation(self):
        self.conversation = self.model.start_chat(history=[])    
    
    def start_conversation(self):
        self.conversation =  self.model.start_chat(history=self._conversation_history)
    
    def _generation_config(self, temperature):
        return genai.types.GenerationConfig(temperature=temperature)
        
    def _construct_message(self, text, role='user'):
        return {
            'role': role,
            'parts': text
        }
        
    def preload_conversation(self, request=None, conversation_history=None):
        if isinstance(conversation_history, list):
            self._conversation_history = conversation_history
        else:
            self._conversation_history = [
                self._construct_message(f"""I want you to give analysis of data which will provide by google, I want you to give me brief analysis. do not repeat that data again, I only want analysis in html format and the format will be like this,
                                            
                                            Format: It should be like this <p> analysis generated by you </p>. and this is the example of html formate code, if there are some points to mention than go with <ol>.
                                            
                                            This is only for example.
                                            <p><strong>Summary:</strong>Analysis will be here</p>
                                            <p><strong>Insights:</strong>Analysis will be here</p>
                                            <p><strong>Visualizations:</strong>Analysis will be here</p>
                                            <p><strong>Recommendations:</strong>Analysis will be here</p>
                                            
                                            I want this analysis perfectly designed, and I am giving you some key points and analysis should contain everything that's below.
                                            
                                                Output:
                                                
                                                Summary: A concise summary of the data, highlighting key statistics, trends, or patterns.
                                                
                                                Insights: Detailed insights derived from the data, including any correlations, anomalies, or significant findings.
                                                
                                                Visualizations: Suggest appropriate visualizations (e.g., bar charts, line graphs, pie charts) to represent the data effectively.
                                                
                                                Recommendations: Actionable recommendations based on the data analysis, including potential next steps or areas for further investigation.
                                                
                                                Structure:
                                                
                                                Introduction: 
                                                
                                                Brief overview of the analysis objective.
                                                
                                                Data Description: Description of the dataset, including columns, data types, and any relevant metadata.
                                                
                                                Analysis: In-depth analysis with statistical measures, comparisons, and interpretations.
                                                
                                                Conclusion: Summary of findings and their implications.
                                                
                                                Formatting:
                                                
                                                Use clear and concise language.
                                                
                                                Structure the output in bullet points or numbered lists for readability.
                                                
                                                Include any relevant tables or charts to support the analysis.
                """)]
